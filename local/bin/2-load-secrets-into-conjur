#!/bin/bash -e

if [[ "$CONJUR_VERSION" -eq "5" ]]
then
  api_key=$(docker-compose exec -T conjur_5 bash -c 'rails r "puts Role[%Q{default:user:admin}].api_key" 2>/dev/null')

  # load policy
  # - load a root policy that creates the pcf-admin user and group
  # - load the pcf policy, owned by the pcf-admin group
  # - load the app policy into the pcf policy
  docker-compose run --rm \
    -e CONJUR_AUTHN_API_KEY="$api_key" \
    --entrypoint bash client -c "
      conjur policy load --replace root /policy/policy_5.yml
      conjur policy load root /policy/pcf_5.yml
      conjur policy load pcf /policy/app.yml
      conjur variable values add pcf/app/database/username 'a database username'
      conjur variable values add pcf/app/database/password 'a database password'
      conjur variable values add pcf/app/stripe/private_key 'a stripe private_key'
    "
else
  # load policy
  # - load a root policy that creates the pcf-admin user and group
  # - load the pcf policy, owned by the pcf-admin group
  # - the pcf policy has an !include that loads app.yml into the pcf policy
  docker-compose exec -T \
    -e CONJUR_AUTHN_LOGIN=admin \
    -e CONJUR_AUTHN_API_KEY=secret \
    conjur_4 bash -c "
      conjur policy load --as-group security_admin /etc/policy_4.yml
      conjur policy load --as-group security_admin /etc/pcf_4.yml
      conjur variable values add pcf/app/database/username 'a database username'
      conjur variable values add pcf/app/database/password 'a database password'
      conjur variable values add pcf/app/stripe/private_key 'a stripe private_key'
    "
fi
